post:
  tags:
    - Servicedesk
  summary: Attach temporary file
  description: >-
    This method adds one or more temporary attachments to a service desk, which
    can then be permanently attached to a customer request using
    [servicedeskapi/request/\{issueIdOrKey\}/attachment](#api-request-issueIdOrKey-attachment-post).


    **Note**: It is possible for a service desk administrator to turn off the
    ability to add attachments to a service desk.


    This method expects a multipart request. The media-type multipart/form-data
    is defined in RFC 1867. Most client libraries have classes that make dealing
    with multipart posts simple. For instance, in Java the Apache HTTP
    Components library provides
    [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html).


    Because this method accepts multipart/form-data, it has XSRF protection on
    it. This means you must submit a header of X-Atlassian-Token: no-check with
    the request or it will be blocked.


    The name of the multipart/form-data parameter that contains the attachments
    must be `file`.


    For example, to upload a file called `myfile.txt` in the Service Desk with
    ID 10001 use

        curl -D- -u customer:customer -X POST -H "X-ExperimentalApi: opt-in" -H "X-Atlassian-Token: no-check" -F "file=@myfile.txt" https://your-domain.atlassian.net/rest/servicedeskapi/servicedesk/10001/attachTemporaryFile

    **[Permissions](#permissions) required**: Permission to add attachments in
    this Service Desk.
  operationId: attachTemporaryFile
  parameters:
    - name: serviceDeskId
      in: path
      description: >-
        The ID of the Service Desk to which the file will be attached. This can
        alternatively be a [project identifier.](#project-identifiers)
      required: true
      schema:
        type: string
  requestBody:
    description: The attachments in a RFC 1867 multipart/form-data format.
    content:
      multipart/form-data:
        schema:
          type: string
          format: binary
  responses:
    '201':
      description: Returns if the file(s) were attached.
      content:
        application/json:
          example: >-
            {"temporaryAttachments":[{"temporaryAttachmentId":"temp8186986881700442965","fileName":"atlassian.png"},{"temporaryAttachmentId":"temp589064256337898328","fileName":"readme.txt"}]}
    '400':
      description: >-
        Returned if the attachments are not valid, or exceed the maximum
        configured attachment size.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorResponse.yaml
    '401':
      description: Returned if the user is not logged in.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorResponse.yaml
    '403':
      description: Returned if the user does not have permission to complete this request.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorResponse.yaml
    '404':
      description: Returned if the service desk does not exist.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorResponse.yaml
    '500':
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorResponse.yaml
  deprecated: false
  security:
    - OAuth2:
        - write:servicedesk-request
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - write:servicedesk-request
    - state: Beta
      scheme: OAuth2
      scopes:
        - read:request.attachment:jira-service-management
        - write:request.attachment:jira-service-management
  x-atlassian-connect-scope: WRITE
